#!/usr/bin/python
# -*- coding: utf-8 -*-

# 以下概念定义摘自维基百科


# 约数(Divisor) 假如整数n除以m，结果是无余数的整数，那么我们称m就是n的约数。 需要注意的是，唯有被除数，除数，商皆为整数，零时，此关系才成立。
# 反过来说，我们称n为m的倍数。

# 约数不限正负
# 1, -1, n 和 -n 这四个数叫做 n 的明显约数

# 试除法求约数
def divisor(n):
    L = []
    for i in range(1, n+1):
        if n % i == 0:
            L.append(i)
    return L

print divisor(45)

# 质数（Prime number），又称素数，指在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数
# （也可定义为只有1与该数本身两个因数的数）。
# 大于1的自然数若不是素数，则称之为合数。

# 算术基本定理确立了素数于数论里的核心地位：任何大于1的整数均可被表示成一串唯一素数之乘积。
# 该定理的唯一性需将1排除于素数外，因为在约数分解中可以有任意多个1。

# 验证一个数字 n 是否为素数的一种简单但缓慢的方法为试除法。此一方法会测试 n 是否为任一在2
# 与 sqrt{n} 之间的整数之倍数。比试除法更加有效率的算法已被发现用来测试较大的数字是否为素数。

# 试除法判断质数
import math
def is_prime(n):
    if n <= 1:
        return 'ValueError'
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
print is_prime(1)
print is_prime(5)
print is_prime(10)
print is_prime(5334323423553)


# 质因子（或质因数）在数论里是指能整除给定正整数的质数。根据算术基本定理，不考虑排列顺序的情况下，每
# 个正整数都能够以唯一的方式表示成它的质因数的乘积。两个没有共同质因子的正整数称为互质。因为1没有质因子，
# 1与任何正整数（包括1本身）都是互质。只有一个质因子的正整数为质数。

# 将一个正整数表示成质因数乘积的过程和得到的表示结果叫做质因数分解。显示质因数分解结果时，
# 如果其中某个质因数出现了不止一次，可以用幂次的形式表示。


# 在数学中，整数分解（英语：integer factorization）又称素因数分解（prime factorization），是将一个正整数写成几个约数的乘积。
# 例如，给出45这个数，它可以分解成3^2 ×5。根据算术基本定理，这样的分解结果应该是独一无二的。
# 这个问题在代数学、密码学、计算复杂性理论和量子计算机等领域中有重要意义。

# 试除法是整数分解算法中最简单和最容易理解的算法。
# 给定一个合数n（这里，n是待分解的正整数），试除法看成是用小于等于 sqrt {n} 的每个素数去试除待分解的整数。
# 如果找到一个数能够整除除尽，这个数就是待分解整数的因子。
# 试除法一定能够找到n的因子。因为它检查n的所有可能的因子，所以如果这个算法“失败”，也就证明了n是个素数。

# 试除法整数分解

def int_factorize(n):
    L = []
    if is_prime(n):
        L.append(n)
        return L
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0 and is_prime(i):
            L.append(i)
            r = int_factorize(n / i)
            L.extend(r)
            break
    return L
print int_factorize(450)

def int_factorize_iter(n):
    L = []
    while not is_prime(n):
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0 and is_prime(i):
                L.append(i)
                n = n / i
                break
    L.append(n)
    return L

print int_factorize_iter(450)


# 互质是两个正整数之间的一种关系。如果两个正整数a和b没有共同的质因子，就称这两个正整数互质。
# 一般来说两个正整数的最大公约数是指能够同时整除两者的正整数之中最大的一个。如果a和b有公共的质因子p，
# 那么它们的最大公约数gcd(a, b)就是p的倍数。a和b互质则说明最大公约数是1.


# 在数学中，公因数显示着若干个整数之间的数论关系。如果一个数同时是几个数的约数，称这个数为它们的“公约数”；公约数中最大一个的称为最大公约数。
# 在数学中，公倍数，显示着若干个整数之间的数论关系。如果一个数同时是几个数的倍数，称这个数为它们的“公倍数”；公倍数中最小一个的称为最小公倍数。

# 最大公约数（英语：Greatest Common Divisor，简写为G.C.D.；或Highest Common Factor，简写为H.C.F.），指某几个整数共有约数中最大的一个。
# 求两个整数最大公约数主要的方法：
# 列举法：各自列出约数，再找出最大的公约数。
# 素因数分解法：两数各作素因数分解，然后取出共有的项乘起来。
# 短除法
# 辗转相除法（扩展版）：常使用于直观上不容易判别公约数的场合。

# 两个整数的最大公约数和最小公倍数（L.C.M.）的关系： G.C.D.(a,b) × L.C.M.(a,b)=|ab|
# 两个整数的最大公约数可用于计算两数的最小公倍数，或分数化简成最简分数。

# 辗转相除法求最大公约数
def gcd(a, b):
    return b if a % b == 0 else gcd(b, a % b)

print gcd(4, 6)
